import pygame
from copy import deepcopy
import numpy as np
from numba import njit

RES = WIDTH, HEIGHT = 1400, 900
TILE = 10
W, H = WIDTH // TILE, HEIGHT // TILE
FPS = 8

pygame.init()
surface = pygame.display.set_mode(RES)
pygame.display.set_caption("It's alive! It's alive!")  # Set the initial title
clock = pygame.time.Clock()

next_field = np.array([[0 for i in range(W)] for j in range(H)])
# current_field = np.array([[1 if not(i*j)%22 else 0 for i in range(W)] for j in range(H)])

# current_field = np.array([[1 if i == W // 2 or j == H // 2 else 0 for i in range(W)] for j in range(H)])

current_field = np.array([[0 for i in range(W)] for j in range(H)])
for i in range(H):
    current_field[i][i+(W-H)//2] = 1
    current_field[H-i-1][i+(W-H)//2] = 1


@njit(fastmath=True)
def check_cells(current_field, next_field):
    res = []
    for x in range(W):
        for y in range(H):
            count = 0
            for j in range(y-1, y+2):
                for i in range(x-1, x+2):
                    if current_field[j % H][i % W] == 1:
                        count += 1

            if current_field[y][x] == 1:
                count -= 1
                if count == 2 or count == 3:
                    next_field[y][x] = 1
                    res.append((x, y))
                else:
                    next_field[y][x] = 0
            else:
                if count == 3:
                    next_field[y][x] = 1
                    res.append((x, y))
                else:
                    next_field[y][x] = 0

    return next_field, res

while True:
    surface.fill(pygame.Color('black'))
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            exit()
    [pygame.draw.line(surface, pygame.Color('#0d1a11'), (x, 0), (x, HEIGHT)) for x in range(0, WIDTH, TILE)]
    [pygame.draw.line(surface, pygame.Color('#0d1a11'), (0, y), (WIDTH, y)) for y in range(0, HEIGHT, TILE)]
    current_field, res = check_cells(current_field, next_field)
    [pygame.draw.rect(surface, pygame.Color('#14ba28'),
                      (x*TILE+1, y*TILE+1, TILE-1, TILE-1)) for x, y in res]

    current_field = deepcopy(next_field)
    print(clock.get_fps())
    #pygame.display.set_caption(f"Changeable Title - FPS: {int(clock.get_fps())}")  # Update the title
    pygame.display.flip()
    clock.tick(FPS)


this code works fine but could you make a changing aura from cells of a different color along the outer contour?